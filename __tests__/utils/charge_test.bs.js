// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/bs-jest/src/jest.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Util$WoocommercePayments from "../../client/utils/charge/util.bs.js";
import * as Types$WoocommercePayments from "../../client/data/types.bs.js";
import * as Charge$WoocommercePayments from "../../client/data/types/Charge.bs.js";

var paidCharge = Charge$WoocommercePayments.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Succeeded */0, undefined);

var failedCharge = Charge$WoocommercePayments.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, false, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Types$WoocommercePayments.Outcome.make(/* IssuerDeclined */2, undefined, undefined)), false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Failed */2, undefined);

var blockedCharge = Charge$WoocommercePayments.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, false, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Types$WoocommercePayments.Outcome.make(/* Blocked */3, undefined, undefined)), false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Failed */2, undefined);

var authorizedCharge = Charge$WoocommercePayments.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* Succeeded */0, undefined);

var fullyRefundedCharge = Charge$WoocommercePayments.make(undefined, undefined, 1500, 1500, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined);

var partiallyRefundedCharge = Charge$WoocommercePayments.make(undefined, undefined, 1500, 1200, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, false, undefined, undefined, undefined);

function getDisputedChargeWithStatus(status) {
  return Charge$WoocommercePayments.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Types$WoocommercePayments.Dispute.make(status, undefined)), true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

Jest.describe("Charge utilities (ReasonML)", (function (param) {
        Jest.describe("isCharge methods", (function (param) {
                Jest.test("should identify a captured successful charge as successful", (function (param) {
                        return Jest.Expect.toEqual(true, Jest.Expect.expect(Util$WoocommercePayments.isChargeSuccessful(paidCharge)));
                      }));
                Jest.test("should identify a not captured successful charge as successful", (function (param) {
                        return Jest.Expect.toEqual(true, Jest.Expect.expect(Util$WoocommercePayments.isChargeSuccessful(authorizedCharge)));
                      }));
                Jest.test("should not identify a failed charge as successful", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargeSuccessful(failedCharge)));
                      }));
                Jest.test("should not identify a blocked charge as successful", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargeSuccessful(blockedCharge)));
                      }));
                Jest.test("should identify a failed charge as failed", (function (param) {
                        return Jest.Expect.toEqual(true, Jest.Expect.expect(Util$WoocommercePayments.isChargeFailed(failedCharge)));
                      }));
                Jest.test("should identify a blocked charge as blocked", (function (param) {
                        return Jest.Expect.toEqual(true, Jest.Expect.expect(Util$WoocommercePayments.isChargeBlocked(blockedCharge)));
                      }));
                Jest.test("should not identify a successful charge as failed", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargeFailed(paidCharge)));
                      }));
                Jest.test("should not identify a successful charge as failed", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargeBlocked(paidCharge)));
                      }));
                Jest.test("should identify a fully refunded charge as fully refunded", (function (param) {
                        return Jest.Expect.toEqual(true, Jest.Expect.expect(Util$WoocommercePayments.isChargeFullyRefunded(fullyRefundedCharge)));
                      }));
                Jest.test("should not identify a partially refunded charge as fully refunded", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargeFullyRefunded(partiallyRefundedCharge)));
                      }));
                Jest.test("should not identify a successful charge as fully refunded", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargeFullyRefunded(paidCharge)));
                      }));
                Jest.test("should identify a partially refunded charge as partially refunded", (function (param) {
                        return Jest.Expect.toEqual(true, Jest.Expect.expect(Util$WoocommercePayments.isChargePartiallyRefunded(partiallyRefundedCharge)));
                      }));
                Jest.test("should not identify a fully refunded charge as partially refunded", (function (param) {
                        return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargePartiallyRefunded(fullyRefundedCharge)));
                      }));
                return Jest.test("should not identify a successful charge as partially refunded", (function (param) {
                              return Jest.Expect.toEqual(false, Jest.Expect.expect(Util$WoocommercePayments.isChargePartiallyRefunded(paidCharge)));
                            }));
              }));
        return Jest.describe("getChargeStatus", (function (param) {
                      Jest.testAll("returns status for charge", {
                            hd: [
                              "succeeded",
                              /* Succeeded */0
                            ],
                            tl: {
                              hd: [
                                "failed",
                                /* Failed */2
                              ],
                              tl: {
                                hd: [
                                  "pending",
                                  /* Pending */1
                                ],
                                tl: /* [] */0
                              }
                            }
                          }, (function (param) {
                              return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Util$WoocommercePayments.getChargeStatus(param[0])));
                            }));
                      return Jest.testAll("returns disputed status", {
                                  hd: [
                                    "needs_response",
                                    /* NeedsResponse */3
                                  ],
                                  tl: {
                                    hd: [
                                      "under_review",
                                      /* UnderReview */4
                                    ],
                                    tl: {
                                      hd: [
                                        "won",
                                        /* Won */6
                                      ],
                                      tl: {
                                        hd: [
                                          "lost",
                                          /* Lost */7
                                        ],
                                        tl: {
                                          hd: [
                                            "warning_needs_response",
                                            /* WarningNeedsResponse */0
                                          ],
                                          tl: {
                                            hd: [
                                              "warning_under_review",
                                              /* WarningUnderReview */1
                                            ],
                                            tl: {
                                              hd: [
                                                "warning_closed",
                                                /* WarningClosed */2
                                              ],
                                              tl: {
                                                hd: [
                                                  "charge_refunded",
                                                  /* ChargeRefunded */5
                                                ],
                                                tl: /* [] */0
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }, (function (param) {
                                    return Jest.Expect.toEqual(param[1], Jest.Expect.expect(Util$WoocommercePayments.getDisputeStatus(param[0])));
                                  }));
                    }));
      }));

export {
  paidCharge ,
  failedCharge ,
  blockedCharge ,
  authorizedCharge ,
  fullyRefundedCharge ,
  partiallyRefundedCharge ,
  getDisputedChargeWithStatus ,
  
}
/* paidCharge Not a pure module */
