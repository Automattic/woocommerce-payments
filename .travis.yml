language: php

cache:
  directories:
    - vendor
    - $HOME/.composer/cache

services:
  - mysql

# Different stages in order to only deploy when everything succeeds
stages:
  - test
  - name: compatibility
    if: branch = master
  - e2e-testing

env:
  global:
    - WC_NEWEST_SUPPORTED_VERSION=4.6.0
    - WC_MOST_USED_VERSION=4.5.0
    - WC_OLDEST_SUPPORTED_VERSION=4.0.0
    - WP_OLDEST_SUPPORTED_VERSION=5.3

# 2. Also test against these combinations, as listed out explicitly one by one

# Additional tests against stable PHP (min recommended version is 5.6) and past supported versions of WP
# and code coverage report.
matrix:
  fast_finish: true
  allow_failures:
    - name: "compatibility: PHP 7.4, WP nightly, WC latest"
      php: 7.4
      env: WP_VERSION=nightly WC_VERSION=latest
      stage: compatibility
    - name: "compatibility: PHP nightly, WP nightly, WC beta"
      php: nightly
      env: WP_VERSION=nightly WC_VERSION=beta
      stage: compatibility
  include:
# PHP versions compatibility (latest WordPress and most used WooCommerce versions)
  - php: 7.1
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION RUN_PHPCS=1
    stage: test
  - php: 7.1
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION
    stage: test
  - php: 7.2
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION
    stage: test
  - php: 7.3
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION
    stage: test
  - php: 7.4
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION
    stage: test
# bottom compatibility edge (oldest supported PHP/WordPress/WooCommerce versions)
  - name: "compatibility: PHP 7.0, WP oldest, WC oldest"
    php: 7.0
    env: WP_VERSION=$WP_OLDEST_SUPPORTED_VERSION WC_VERSION=$WC_OLDEST_SUPPORTED_VERSION
    stage: compatibility
# WooCommerce versions compatibility (latest supported PHP/WordPress versions on target WooCommerce versions)
  - name: "compatibility: PHP 7.4, WP latest, WC oldest"
    php: 7.4
    env: WP_VERSION=latest WC_VERSION=$WC_OLDEST_SUPPORTED_VERSION
    stage: compatibility
  - name: "compatibility: PHP 7.4, WP latest, WC 4.4"
    php: 7.4
    env: WP_VERSION=latest WC_VERSION=4.4.0
    stage: compatibility
  - name: "compatibility: PHP 7.4, WP latest, WC most used"
    php: 7.4
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION
    stage: compatibility
  - name: "compatibility: PHP 7.4, WP latest, WC newest"
    php: 7.4
    env: WP_VERSION=latest WC_VERSION=$WC_NEWEST_SUPPORTED_VERSION
    stage: compatibility
# top compatibility edge (nightly versions of WordPress on latest supported WooCommerce/PHP version)
  - name: "compatibility: PHP 7.4, WP nightly, WC latest"
    php: 7.4
    env: WP_VERSION=nightly WC_VERSION=latest
    stage: compatibility
  - name: "compatibility: PHP nightly, WP nightly, WC beta"
    php: nightly
    env: WP_VERSION=nightly WC_VERSION=beta
    stage: compatibility
# E2E testing
  - name: "E2E tests"
    env: WP_VERSION=latest WC_VERSION=$WC_MOST_USED_VERSION
    stage: e2e-testing
    script:
      - npm run build:client && npm run test:e2e-setup && npm run test:e2e

before_install:
  - nvm install lts/erbium
  - npm i -g npm@>=6.13.0
  - echo -e "machine github.com\n  login $CI_USER_TOKEN" > ~/.netrc

install:
  # Revert composer 2.0.7 to prevent error with Jetpack Autoloader
  - composer self-update 2.0.6
  - npm ci
  - php --version && composer install
  - WCPAY_DIR="/home/travis/build/Automattic/woocommerce-payments/" bash ./bin/install-wp-tests.sh woocommerce_test root '' localhost $WP_VERSION $WC_VERSION false

before_script:
  - |
    if [[ ${TRAVIS_PHP_VERSION:0:3} == "7.0" ]]; then
      echo "downloading phpunit"
      wget https://phar.phpunit.de/phpunit-6.5.14.phar
    fi

script:
  - bash bin/phpunit.sh
  - bash bin/phpcs.sh
  - npm run lint
  - npm test

branches:
  only:
    - master
    - /^feature\/.*$/
