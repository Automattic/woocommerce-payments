#!/usr/bin/env node
const https = require('https');
const vm = require( 'vm' );
const fs = require( 'fs' );
const path = require( 'path' );

const intlUrl = 'https://raw.githubusercontent.com/jackocnr/intl-tel-input/master/src/js/data.js';
const phoneUrl = 'https://raw.githubusercontent.com/AfterShip/phone/master/src/data/country_phone_data.ts'

const fetch = (url) => new Promise((resolve, reject) => {
	https.get(url,(res) => {
		let body = "";

		res.on("data", (chunk) => {
			body += chunk;
		});

		res.on("end", () => {
			resolve(body)
		});

	}).on("error", reject);
});

const numberOrString = (str) => Number(str).toString().length !== str.length ? str : Number(str);

const evaluate = (code) => {
	const script = new vm.Script(code);
	const context = vm.createContext();

	script.runInContext(context);

	return context;
}

const parse = (data) => data.map((item) => ({
	alpha2: item[0], // as string,
	code: item[1].toString(), // as string,
	priority: (item[2] || 0), // as number,
	start: item[3]?.map(String), // as string[] | undefined,
	lengths: item[4], // as number[] | undefined,
}));

const saveToFile = (data) => {
	const dataString = JSON.stringify(data).replace(/null/g, '');
	const parseString = parse.toString()
		.replace(/, \/\//g, '')
		.replace('(data) => data.map((item)', '(data: any[]) => data.map((item: any[])');

	const code = [
		'// Do not edit this file directly.',
		'// Generated by bin/build-metadata.js', '',
		'/* eslint-disable */', '',
		`const parse = ${parseString}`, '',
		`const data = ${dataString}`, '',
		`export default parse(data);`,
		`export type DataType = ReturnType<typeof parse>;`
	].join('\n');

	const filePath = path.resolve(
		__dirname,
		'..',
		'client',
		'components',
		'phone-number-input',
		'data.ts'
	);

	fs.writeFileSync( filePath, code );
}

(async () => {
	const intlData = await fetch(intlUrl).then(evaluate);
	const phoneData = await fetch(phoneUrl).then(data => "var data = " + data.substring(15)).then(evaluate);

	// Convert phoneData array to object
	const phoneCountries = phoneData.data.reduce((acc, item) => ({
		...acc,
		[item.alpha2.toLowerCase()]: item
	}), {});

	// Traverse intlData to create a new array with required fields
	const countries = intlData.allCountries.map((item) => {
		const phoneCountry = phoneCountries[item.iso2];
		const result = [
			item.iso2.toUpperCase(), // alpha2
			Number(item.dialCode), // code
			/* [2] priority */,
			/* [3] start */,
			/* [4] lengths */,
		];

		if (item.priority) {
			result[2] = item.priority;
		}

		const areaCodes = item.areaCodes || [];
		const beginWith = phoneCountry?.mobile_begin_with || [];
		if (areaCodes.length || beginWith.length) {
			result[3] = [...new Set([...areaCodes, ...beginWith])].map(numberOrString);
		}

		if (phoneCountry?.phone_number_lengths) {
			result[4] = phoneCountry.phone_number_lengths;
		}

		return result;
	});

	saveToFile(countries)
})();
