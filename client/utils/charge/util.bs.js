// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";

var failedOutcomeTypes = {
  hd: /* IssuerDeclined */2,
  tl: {
    hd: /* Invalid */4,
    tl: /* [] */0
  }
};

var blockedOutcomeTypes = {
  hd: /* Blocked */3,
  tl: /* [] */0
};

function extractOutcomeType(charge) {
  var o = charge.outcome;
  if (o !== undefined) {
    return o.type;
  } else {
    return /* Invalid */4;
  }
}

function isChargeBlocked(charge) {
  if (/* Failed */2 === charge.status) {
    return List.exists((function (t) {
                  return extractOutcomeType(charge) === t;
                }), blockedOutcomeTypes);
  } else {
    return false;
  }
}

function isChargeFailed(charge) {
  if (/* Failed */2 === charge.status) {
    return List.exists((function (t) {
                  return extractOutcomeType(charge) === t;
                }), failedOutcomeTypes);
  } else {
    return false;
  }
}

function isChargeDisputed(charge) {
  return charge.disputed === true;
}

function isChargeRefunded(charge) {
  return charge.amount_refunded > 0;
}

function isChargeFullyRefunded(charge) {
  return charge.refunded;
}

function isChargePartiallyRefunded(charge) {
  if (charge.amount_refunded > 0) {
    return !charge.refunded;
  } else {
    return false;
  }
}

function isChargeSuccessful(charge) {
  if (/* Succeeded */0 === charge.status) {
    return charge.paid;
  } else {
    return false;
  }
}

function getDisputeStatus(status) {
  switch (status) {
    case "charge_refunded" :
        return /* ChargeRefunded */5;
    case "lost" :
        return /* Lost */7;
    case "needs_response" :
        return /* NeedsResponse */3;
    case "under_review" :
        return /* UnderReview */4;
    case "warning_closed" :
        return /* WarningClosed */2;
    case "warning_needs_response" :
        return /* WarningNeedsResponse */0;
    case "warning_under_review" :
        return /* WarningUnderReview */1;
    case "won" :
        return /* Won */6;
    default:
      return /* NotDisputed */8;
  }
}

function getChargeStatus(status) {
  switch (status) {
    case "failed" :
        return /* Failed */2;
    case "pending" :
        return /* Pending */1;
    case "succeeded" :
        return /* Succeeded */0;
    default:
      return /* Pending */1;
  }
}

function getOutcomeType(type_) {
  switch (type_) {
    case "authorized" :
        return /* Authorized */0;
    case "blocked" :
        return /* Blocked */3;
    case "invalid" :
        return /* Invalid */4;
    case "issuer_declined" :
        return /* IssuerDeclined */2;
    case "manual_review" :
        return /* ManualReview */1;
    default:
      return /* Invalid */4;
  }
}

export {
  failedOutcomeTypes ,
  blockedOutcomeTypes ,
  extractOutcomeType ,
  isChargeBlocked ,
  isChargeFailed ,
  isChargeDisputed ,
  isChargeRefunded ,
  isChargeFullyRefunded ,
  isChargePartiallyRefunded ,
  isChargeSuccessful ,
  getDisputeStatus ,
  getChargeStatus ,
  getOutcomeType ,
  
}
/* No side effect */
