// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var PaymentMethodGen = require("./PaymentMethod.gen");
var Card$WoocommercePayments = require("../../data/types/Card.bs.js");

function __(prim, prim$1) {
  return PaymentMethodGen.__(prim, prim$1);
}

function sprintf(prim, prim$1, prim$2) {
  return PaymentMethodGen.sprintf(prim, prim$1, prim$2);
}

function formatPaymentMethodDetails(charge) {
  console.log(charge);
  var billingDetails = charge.billing_details;
  var payment_method = charge.payment_method;
  var card = Belt_Option.getWithDefault(charge.payment_method_details.card, Card$WoocommercePayments.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined));
  var date = String(card.exp_month) + (" / " + String(card.exp_year));
  var match = card.funding;
  var fundingTranslated;
  switch (match) {
    case "credit" :
        fundingTranslated = PaymentMethodGen.__("credit", "woocommerce-payments");
        break;
    case "debit" :
        fundingTranslated = PaymentMethodGen.__("debit", "woocommerce-payments");
        break;
    case "prepaid" :
        fundingTranslated = PaymentMethodGen.__("prepaid", "woocommerce-payments");
        break;
    case "unknown" :
        fundingTranslated = PaymentMethodGen.__("unknown", "woocommerce-payments");
        break;
    default:
      fundingTranslated = "";
  }
  var cardType = PaymentMethodGen.sprintf(PaymentMethodGen.__("%1$s %2$s card", "woocommerce-payments"), $$String.capitalize_ascii(card.network), fundingTranslated);
  var country = Belt_Option.getWithDefault(Js_dict.get(wcSettings, card.country), "");
  return {
          last4: card.last4,
          fingerprint: card.fingerprint,
          date: date,
          cardType: cardType,
          id: payment_method,
          name: billingDetails.name,
          email: billingDetails.email,
          country: country,
          cvcCheck: card.checks.cvc_check,
          line1Check: card.checks.address_line1_check,
          postalCodeCheck: card.checks.address_postal_code_check,
          formattedAddress: billingDetails.formatted_address
        };
}

exports.__ = __;
exports.sprintf = sprintf;
exports.formatPaymentMethodDetails = formatPaymentMethodDetails;
/* ./PaymentMethod.gen Not a pure module */
