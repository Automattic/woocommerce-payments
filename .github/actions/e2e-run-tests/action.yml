name: 'Run E2E Tests'

runs:
  using: "composite"
  steps:
    # Log workflow configuration
    - name: Workflow Configuration
      run: |
        echo "WordPress version: ${{ matrix.wordpress }}"
        echo "WooCommerce version: ${{ matrix.woocommerce }}"
        echo "PHP version: ${{ matrix.php }}"
        echo "Test Group: ${{ matrix.test_groups }}"
        echo "Test Branch: ${{ matrix.test_branches }}"

    # PHP setup
    - name: PHP Setup
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        tools:       composer
        extensions:  mysql
        coverage:    none

    # Composer setup
    - name: Composer Setup
      run: composer self-update 2.0.6

    # Use node version from .nvmrc
    - name: Setup NodeJS
      uses: actions/setup-node@v2
      with:
        node-version-file: '.nvmrc'

    # Cache composer dependencies
    - name: Cache composer dependencies
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: ./vendor
        key:  ${{ runner.os }}-vendor-${{ hashFiles('composer.lock') }}

    # Cache node dependencies
    - name: Cache node dependencies
      id: node-cache
      uses: actions/cache@v2
      with:
        path: ./node_modules
        key:  ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    # Install composer dependencies if not present on cache
    - name: Install composer dependencies
      if: ${{ steps.composer-cache.outputs.cache-hit == false }}
      run: composer install --no-progress

    # Install node dependencies if not present on cache
    - name: Install node dependencies
      if: ${{ steps.node-cache.outputs.cache-hit == false }}
      run: npm ci

    # Build WCPay client
    - name: Build WCPay Client
      run: npm run build:client

    # Prepare test environment
    - name: Prepare test environment
      run: npm run test:e2e-setup

    - name: First Run E2E Tests
      id: first_run_e2e_tests
      # Use +e to trap errors when running E2E tests.
      shell: /bin/bash +e {0}
      run: |
        npm run test:e2e -- --json --outputFile="$E2E_FIRST_RUN_RESULT_FILEPATH"

        E2E_NUM_FAILED_TEST_SUITES=$(cat "$E2E_FIRST_RUN_RESULT_FILEPATH" | jq '.numFailedTestSuites')

        echo "::set-output name=FIRST_RUN_FAILED_TEST_SUITES::$(echo $E2E_NUM_FAILED_TEST_SUITES)"

        if [[ ${E2E_NUM_FAILED_TEST_SUITES} -gt 0 ]]; then
          echo "::notice::${E2E_NUM_FAILED_TEST_SUITES} E2E test(s) failed in the first run but we will try (it) them again in the second run."
          exit 0
        fi

    - name: Re-try Failed E2E Files
      if: ${{ steps.first_run_e2e_tests.outputs.FIRST_RUN_FAILED_TEST_SUITES > 0  }}
      # Filter failed E2E files from the result JSON file, and re-run them.
      run: |
        cat "$E2E_FIRST_RUN_RESULT_FILEPATH" | jq '.testResults[] | select(.status == "failed") | .name' | xargs npm run test:e2e

    # Archive screenshots if any
    - name: Archive e2e test screenshots & logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
          name: e2e-screenshots-logs
          path: |
            tests/e2e/screenshots
            tests/e2e/docker/wordpress/wp-content/debug.log
            ${{ env.E2E_FIRST_RUN_RESULT_FILEPATH }}
          if-no-files-found: ignore
          retention-days: 5
