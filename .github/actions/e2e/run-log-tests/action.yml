name: 'Run Tests'
description: 'Runs E2E tests with retry & upload logs and screenshots'

runs:
  using: "composite"
  steps:
    - name: First Run E2E Tests
      id: first_run_e2e_tests
      # Use +e to trap errors when running E2E tests.
      shell: /bin/bash +e {0}
      run: |
        npm run test:e2e -- --json --outputFile="$E2E_RESULT_FILEPATH" --NODE_ENV="$NODE_ENV"
        
        if [[ -f "$E2E_RESULT_FILEPATH" ]]; then
          E2E_NUM_FAILED_TEST_SUITES=$(cat "$E2E_RESULT_FILEPATH" | jq '.numFailedTestSuites')
          echo "FIRST_RUN_FAILED_TEST_SUITES=$(echo $E2E_NUM_FAILED_TEST_SUITES)" >> $GITHUB_OUTPUT
          if [[ ${E2E_NUM_FAILED_TEST_SUITES} -gt 0 ]]; then
            echo "::notice::${E2E_NUM_FAILED_TEST_SUITES} E2E test(s) failed in the first run but we will try (it) them again in the second run."
            exit 0
          fi
        else
          echo "FIRST_RUN_FAILED_TEST_SUITES=0" >> $GITHUB_OUTPUT
          echo "::notice::${E2E_RESULT_FILEPATH} doesn't exist so results are unclear and we will not try again."
          exit 1
        fi
        echo "::notice::Testing notice after exit."

    # Retry failed E2E tests
    - name: Re-try Failed E2E Files
      if: ${{ steps.first_run_e2e_tests.outputs.FIRST_RUN_FAILED_TEST_SUITES > 0  }}
      shell: bash
      # Filter failed E2E files from the result JSON file, and re-run them.
      run: |
        cat "$E2E_RESULT_FILEPATH" | jq '.testResults[] | select(.status == "failed") | .name' | xargs npm run test:e2e -- --NODE_ENV="$NODE_ENV"

    # Archive screenshots if any
    - name: Archive e2e test screenshots & logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
          name: wp(${{ env.E2E_WP_VERSION }})-wc(${{ env.E2E_WC_VERSION }})-${{ env.E2E_GROUP }}-${{ env.E2E_BRANCH }}
          path: |
            tests/e2e/screenshots
            tests/e2e/docker/wordpress/wp-content/debug.log
            ${{ env.E2E_RESULT_FILEPATH }}
          if-no-files-found: ignore
          retention-days: 14
