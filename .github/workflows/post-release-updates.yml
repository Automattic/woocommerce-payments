name: "Handle post-release steps"

# This action will run when it is triggered manually
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'The release version (e.g. 4.5.0)'
        required: true
        type: string
      allowMerge:
        description: 'Whether we allow merging trunk back into develop'
        required: false
        type: string
        default: "false"

defaults:
  run:
    shell: bash

jobs:
  create-gh-release:
    name: "Create a GH release"
    runs-on: ubuntu-20.04
    env:
      RELEASE_VERSION: ${{ inputs.releaseVersion }}
    
    steps:
      - name: "Checkout repository (trunk)"
        uses: actions/checkout@v3
        with:
          ref: 'trunk'
          
      - name: "Set up repository"
        uses: ./.github/actions/setup-repo

      - name: "Create a tag"
        id: create_tag
        uses: ./.github/actions/create-tag
        with:
          version: ${{ env.RELEASE_VERSION }}
          is-pre-release: "false"

      - name: "Get the last changelog in changelog.txt"
        id: get_changelog
        run: |
          CHANGELOG=$(awk '/^= / { if (p) { exit }; p=1; next } p && NF' changelog.txt)
          CHANGELOG="${CHANGELOG//$'\n'/\\n}"  
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: "Build the plugin"
        id: build_plugin
        uses: ./.github/actions/build
        
      - name: "Create a GH release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG: ${{ steps.get_changelog.outputs.changelog }}
          TAG_MESSAGE: ${{ steps.create_tag.outputs.tag-message }}
          FILENAME: ${{ steps.build_plugin.outputs.release-filename }}
        run: |
          RELEASE_NOTES=$(echo -e "${CHANGELOG}")
          gh release create $RELEASE_VERSION --notes "$RELEASE_NOTES" --title "$TAG_MESSAGE" $FILENAME
          
  merge-trunk-into-develop:
    name: "Merge trunk back into develop"
    if: ${{ inputs.allowMerge == 'true' }}
    runs-on: ubuntu-20.04
    env:
      RELEASE_VERSION: ${{ inputs.releaseVersion }}
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          ref: 'trunk'
          fetch-depth: 0

      - name: "Merge trunk back into develop"
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout develop && git pull
          git merge trunk --no-ff -m "Merge trunk v$RELEASE_VERSION into develop"
          git push

  trigger-translations:
    name: "Trigger translations update for the release"
    runs-on: ubuntu-20.04
    steps:
      - name: "Trigger translations update on GlotPress"
        uses: ./.github/actions/trigger-translations
        with:
          release-version: ${{ inputs.releaseVersion }}
          glotpress-url: ${{ secrets.GLOTPRESS_IMPORT_URL }}
