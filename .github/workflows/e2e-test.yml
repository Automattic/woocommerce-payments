name: WCPay E2E Tests

on:
  schedule:
    - cron: '0 */6 * * *'
  pull_request:
    branches:
      - trunk
  push:
    branches:
      - develop
      - trunk
  workflow_dispatch:

env:
  E2E_GH_TOKEN:             ${{ secrets.E2E_GH_TOKEN }}
  CI_USER_TOKEN:            ${{ secrets.CI_USER_TOKEN }}
  WCP_DEV_TOOLS_REPO:       ${{ secrets.WCP_DEV_TOOLS_REPO }}
  WCP_SERVER_REPO:          ${{ secrets.WCP_SERVER_REPO }}
  WC_SUBSCRIPTIONS_REPO:    ${{ secrets.WC_SUBSCRIPTIONS_REPO }}
  WC_ACTION_SCHEDULER_REPO: ${{ secrets.WC_ACTION_SCHEDULER_REPO }}
  WC_BLOCKS_REPO:           ${{ secrets.WC_BLOCKS_REPO }}
  E2E_BLOG_ID:              ${{ secrets.E2E_BLOG_ID }}
  E2E_BLOG_TOKEN:           ${{ secrets.E2E_BLOG_TOKEN }}
  E2E_USER_TOKEN:           ${{ secrets.E2E_USER_TOKEN }}
  E2E_RETEST:               1
  WC_E2E_SCREENSHOTS:       1
  E2E_SLACK_CHANNEL:        ${{ secrets.E2E_SLACK_CHANNEL }}
  E2E_SLACK_TOKEN:          ${{ secrets.E2E_SLACK_TOKEN }}

jobs:
  wcpay-e2e-tests:
    runs-on: ubuntu-18.04

    strategy:
      fail-fast:     false
      matrix:
        # Min WooCommerce | L-2 | L(atest) | beta
        woocommerce:   [ '4.8.0', '6.0.0', '6.2.0', 'beta' ]
        wordpress:     [ 'latest' ]
        php:           [ '7.4' ]
        test_groups:   [ 'wcpay', 'subscriptions', 'blocks' ]
        test_branches: [ 'merchant', 'shopper' ]
        exclude:
          - test_groups: 'blocks'
            test_branches: 'merchant'
          - woocommerce: '4.8.0'
            test_groups: 'blocks'

    name: WC - ${{ matrix.woocommerce }} | ${{ matrix.test_groups }} - ${{ matrix.test_branches }}

    env:
      E2E_WP_VERSION: ${{ matrix.wordpress }}
      E2E_WC_VERSION: ${{ matrix.woocommerce }}
      E2E_GROUP:  ${{ matrix.test_groups }}
      E2E_BRANCH: ${{ matrix.test_branches }}

    steps:
      # Set conditional ENV Variables
      - name: Set conditional variables
        if: ${{ matrix.woocommerce == '4.8.0' }}
        run: |
          echo "SKIP_WC_BLOCKS_TESTS=1" >> $GITHUB_ENV

      # Log workflow configuration
      - name: Workflow Configuration
        run: |
          echo "WordPress version: ${{ matrix.wordpress }}"
          echo "WooCommerce version: ${{ matrix.woocommerce }}"
          echo "PHP version: ${{ matrix.php }}"
          echo "Test Group: ${{ matrix.test_groups }}"
          echo "Test Branch: ${{ matrix.test_branches }}"

      # Clone Repo
      - name: Clone WCPay Repository
        uses: actions/checkout@v2

      # Use node version from .nvmrc
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      # Dependency caching
      - name: Add composer to cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/composer/
          key:  ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Add vendor directory to cache
        uses: actions/cache@v2
        with:
          path: vendor/
          key:  ${{ runner.os }}-vendor-${{ hashFiles('composer.lock') }}

      - name: Add NPM directory to cache
        uses: actions/cache@v2
        with:
          path: ~/.npm/
          key:  ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Add node_modules to cache
        uses: actions/cache@v2
        with:
          path: node_modules/
          key:  ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      # PHP setup
      - name: PHP Setup
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools:       composer
          extensions:  mysql
          coverage:    none

      # Prepare testing dependencies
      - name: Prepare testing dependencies
        run: |
          echo -e "machine github.com\n  login $CI_USER_TOKEN" > ~/.netrc
          sudo systemctl start mysql.service
          composer self-update 2.0.6 && composer install --no-progress

      # Build WCPay client
      - name: Build WCPay Client
        run: npm ci && npm run build:client

      # Prepare test environment
      - name: Prepare test environment
        run: |
          npm run test:e2e-setup

      # Run Tests
      - name: Run E2E Tests
        run: npm run test:e2e

      # Archive screenshots if any
      - name: Archive e2e test screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
            name: e2e-screenshots
            path: tests/e2e/screenshots
            if-no-files-found: ignore
            retention-days: 5
