name: WCPay E2E Tests

on:
  schedule:
    - cron: '0 */6 * * *'
  pull_request:
    branches:
      - trunk
  push:
    branches:
      - develop
      - trunk
  workflow_dispatch:

env:
  E2E_GH_TOKEN:          ${{ secrets.E2E_GH_TOKEN }}
  CI_USER_TOKEN:         ${{ secrets.CI_USER_TOKEN }}
  WCP_DEV_TOOLS_REPO:    ${{ secrets.WCP_DEV_TOOLS_REPO }}
  WCP_DEV_TOOLS_BRANCH:  'trunk'
  WCP_SERVER_REPO:       ${{ secrets.WCP_SERVER_REPO }}
  WC_SUBSCRIPTIONS_REPO: ${{ secrets.WC_SUBSCRIPTIONS_REPO }}
  E2E_BLOG_ID:           ${{ secrets.E2E_BLOG_ID }}
  E2E_BLOG_TOKEN:        ${{ secrets.E2E_BLOG_TOKEN }}
  E2E_USER_TOKEN:        ${{ secrets.E2E_USER_TOKEN }}
  E2E_RETEST:            1
  WC_E2E_SCREENSHOTS:    1
  E2E_SLACK_CHANNEL:     ${{ secrets.E2E_SLACK_CHANNEL }}
  E2E_SLACK_TOKEN:       ${{ secrets.E2E_SLACK_TOKEN }}
  E2E_USE_LOCAL_SERVER:  false

jobs:
  wcpay-e2e-tests:
    runs-on: ubuntu-18.04

    strategy:
      fail-fast:     false
      matrix:
        # Min WooCommerce | L-2 | L(atest) | beta
        woocommerce:   [ '6.0.1', '6.5.1', 'latest', 'beta' ]
        wordpress:     [ 'latest', 'nightly' ]
        php:           [ '7.4' ]
        test_groups:   [ 'wcpay', 'subscriptions', 'blocks' ]
        test_branches: [ 'merchant', 'shopper' ]
        exclude:
          - test_groups: 'blocks'
            test_branches: 'merchant'
          - woocommerce: '6.0.1'
            test_groups: 'blocks'
            test_branches: 'shopper'
          - woocommerce: '6.5.1'
            test_groups: 'blocks'
            test_branches: 'shopper'
          - wordpress: 'nightly'
            woocommerce: '6.0.1'
          - wordpress: 'nightly'
            woocommerce: '6.5.1'
          - wordpress: 'nightly'
            woocommerce: 'beta'

    name: WC - ${{ matrix.woocommerce }} | WP - ${{ matrix.wordpress }} | ${{ matrix.test_groups }} - ${{ matrix.test_branches }}

    env:
      E2E_WP_VERSION: ${{ matrix.wordpress }}
      E2E_WC_VERSION: ${{ matrix.woocommerce }}
      E2E_GROUP:  ${{ matrix.test_groups }}
      E2E_BRANCH: ${{ matrix.test_branches }}
      E2E_RESULT_FILEPATH: './tests/e2e/results.json'

    steps:
      # Conditionally skip WC Blocks tests. Remove/update based on min supported WC version by the blocks checkout plugin.
      - name: Conditionally skip WC Blocks tests
        run: |
          SKIP_WC_VERSIONS=('6.0.1' '6.5.1')
          if [[ " ${SKIP_WC_VERSIONS[@]} " =~ " ${E2E_WC_VERSION} " ]]; then
            echo "SKIP_WC_BLOCKS_TESTS=1" >> $GITHUB_ENV
          fi

      # Log workflow configuration
      - name: Workflow Configuration
        run: |
          echo "WordPress version: ${{ matrix.wordpress }}"
          echo "WooCommerce version: ${{ matrix.woocommerce }}"
          echo "PHP version: ${{ matrix.php }}"
          echo "Test Group: ${{ matrix.test_groups }}"
          echo "Test Branch: ${{ matrix.test_branches }}"

      # Clone Repo
      - name: Clone WCPay Repository
        uses: actions/checkout@v2

      # Add GH token for authentication
      - name: Add GH token for authentication
        run: echo -e "machine github.com\n  login $CI_USER_TOKEN" > ~/.netrc

      # PHP setup
      - name: PHP Setup
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools:       composer
          extensions:  mysql
          coverage:    none

      # Composer setup
      - name: Composer Setup
        run: composer self-update 2.0.6

      # Use node version from .nvmrc
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      # Cache composer dependencies
      - name: Cache composer dependencies
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: ./vendor
          key:  ${{ runner.os }}-vendor-${{ hashFiles('composer.lock') }}

      # Cache node dependencies
      - name: Cache node dependencies
        id: node-cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key:  ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      # Install composer dependencies if not present on cache
      - name: Install composer dependencies
        if: ${{ steps.composer-cache.outputs.cache-hit == false }}
        run: composer install --no-progress

      # Install node dependencies if not present on cache
      - name: Install node dependencies
        if: ${{ steps.node-cache.outputs.cache-hit == false }}
        run: npm ci

      # Build WCPay client
      - name: Build WCPay Client
        run: npm run build:client

      # Prepare test environment
      - name: Prepare test environment
        run: npm run test:e2e-setup

      # Run Tests
      - name: Run E2E Tests
        id: first_run_e2e_tests
        # Use +e to trap errors when running E2E tests.
        shell: /bin/bash +e {0}
        run: | 
          npm run test:e2e -- --json --outputFile="$E2E_RESULT_FILEPATH"
          E2E_NUM_FAILED_TEST_SUITES=$(cat "$E2E_RESULT_FILEPATH" | jq '.numFailedTestSuites')
          echo "::set-output name=FIRST_RUN_FAILED_TEST_SUITES::$(echo $E2E_NUM_FAILED_TEST_SUITES)"
          if [[ ${E2E_NUM_FAILED_TEST_SUITES} -gt 0 ]]; then
            echo '::notice::Some tests failed but we will try them again in the next job.'
            exit 0
          fi
      
      - name: Re-try failed test files
        if: ${{ steps.first_run_e2e_tests.outputs.FIRST_RUN_FAILED_TEST_SUITES > 0  }}
        run: |
          cat "$E2E_RESULT_FILEPATH" | jq '.testResults[] | select(.status == "failed") | .name' | xargs npm run test:e2e

      # Archive screenshots if any
      - name: Archive e2e test screenshots & logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
            name: e2e-screenshots-logs
            path: |
              tests/e2e/screenshots
              tests/e2e/docker/wordpress/wp-content/debug.log
            if-no-files-found: ignore
            retention-days: 5
