---
name: (pre-release) Publish on tag push
on:
  push:
    tags:
      # ignore pure SemVer tags processed by release tool
      - '![0-9]+.[0-9]+.[0-9]+'
      # run for all other tags
      - '**'
env:
  RELEASE_FILENAME: 'woocommerce-payments.zip'

jobs:
  publish-pre-release:
    name: Publish pre-release
    runs-on: ubuntu-20.04

    steps:
      # clone the repository
      - uses: actions/checkout@v2
      # enable dependencies caching (vendor and node_modules are wiped during build so they are ignored here)
      - uses: actions/cache@v2
        with:
          path: ~/.cache/composer/
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
      - uses: actions/cache@v2
        with:
          path: ~/.npm/
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
      # setup PHP, but without debug extensions for reasonable performance
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools:       composer
          coverage:    none

      - name: Get the tag name
        id: get_tag
        shell: bash
        run: echo ::set-output name=TAG_REF::${GITHUB_REF#refs/tags/}

      - name: Retrive tag information
        id: get_tag_info
        shell: bash
        run: echo ::set-output name=RAW_TAG_DATA::$(curl https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.get_tag.outputs.TAG_REF }} )

      - name: Retrive tag object
        id: get_tag_object
        shell: bash
        env:
          TAG_OBJECT_URL: ${{ fromJson( steps.get_tag_info.outputs.RAW_TAG_DATA ).object.url }}
        run: echo ::set-output name=RAW_TAG_OBJECT::$(curl "$TAG_OBJECT_URL" )

      - name: Build release
        shell: bash
        run: |
          npm ci
          npm run build

          if [[ ! -f $RELEASE_FILENAME ]]; then
            echo "Failed to create release archive $RELEASE_FILENAME"
            exit 1
          fi

      - name: Extract changelog
        env:
          TAG: ${{ steps.get_tag.outputs.TAG_REF }}
        id: get_changelog
        shell: bash
        run: |
          # pick anything before the first dash as a version number
          VERSION=$(sed -E 's/^([^-]+)-.*/\1/' <<< $TAG)

          echo "Picking up changelog for version '$VERSION'..."
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]];
          then
            # Tag starts with SemVer, pick changelog for this version
            CHANGELOG=$(awk -v ver="$VERSION" '/^= / { if (p) { exit }; if ($2 == ver) { p=1; next } } p && NF' changelog.txt)
          else
            # Otherwise use the first changelog section
            CHANGELOG=$(awk '/^= / { if (p) { exit }; p=1; next } p && NF' changelog.txt)
          fi
          echo "$CHANGELOG"
          echo ::set-output name=CHANGELOG_JSON::$(echo "$CHANGELOG" | jq -aRs '.')

      - name: Create release
        id: create_release
        shell: bash
        env:
          TAG: ${{ steps.get_tag.outputs.TAG_REF }}
          TAG_MESSAGE: ${{ fromJson( steps.get_tag_object.outputs.RAW_TAG_OBJECT ).message }}
          CHANGELOG: ${{ steps.get_changelog.outputs.CHANGELOG_JSON }}
        run: |
          NAME=$( echo -n ${TAG_MESSAGE:=$TAG} | jq -aRs '.' )
          echo "Will build a release for tag '$TAG' with the name '$NAME'..."

          CREATE_RELEASE_OUT=$(mktemp)

          echo "Creating pre-release..."
          http_code=$(curl --request POST \
              --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data "{\"tag_name\":\"$TAG\",\"target_commitish\":\"develop\",\"name\":$NAME,\"body\":$CHANGELOG,\"prerelease\":true}" \
              --silent \
              --output "$CREATE_RELEASE_OUT" \
              --write-out "%{http_code}" \
              --url "https://api.github.com/repos/${{ github.repository }}/releases")

          response=$(cat "$CREATE_RELEASE_OUT")
          rm "$CREATE_RELEASE_OUT"

          if [[ ${http_code} -lt 200 || ${http_code} -gt 299 ]]; then
            echo "Could not create release:"
            echo "$response"
            exit 1
          fi

          echo "Release created."
          echo ::set-output name=RELEASE_JSON::$response

      - name: Upload release assets
        id: upload_release_assets
        env:
          UPLOAD_URL: ${{ fromJson( steps.create_release.outputs.RELEASE_JSON ).upload_url }}
        shell: bash
        run: |
          echo "Uploading release assets to GitHub release..."

          # remove trailing attributes from upload_url
          upload_url=$(echo $UPLOAD_URL | sed -E 's/([^{]*).*$/\1/')

          if [[ -z $upload_url ]]; then
            echo "No upload URL found in response:"
            echo "$response"
            exit 1
          fi

          UPLOAD_RELEASE_OUT=$(mktemp)

          http_code=$(curl --request POST \
              --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
              --header 'Content-Type: application/zip' \
              --data-binary "@$RELEASE_FILENAME" \
              --silent \
              --output "$UPLOAD_RELEASE_OUT" \
              --write-out "%{http_code}" \
              --url "${upload_url}?name=$RELEASE_FILENAME")

          response=$(cat "$UPLOAD_RELEASE_OUT")
          rm "$UPLOAD_RELEASE_OUT"

          if [[ ${http_code} -lt 200 || ${http_code} -gt 299 ]]; then
            echo "Could not upload plugin archive $RELEASE_FILENAME to GitHub release:"
            echo "$response"
            exit 1
          fi
          echo "Assets uploaded."

      - name: Trigger translations update on GlotPress
        id: trigger_translations
        env:
          TAG: ${{ steps.get_tag.outputs.TAG_REF }}
          GLOTPRESS_IMPORT_URL: ${{ secrets.GLOTPRESS_IMPORT_URL }}
        shell: bash
        run: |
          echo "Triggering translations update on GlotPress..."

          TRIGGER_UPLOAD_OUT=$(mktemp)

          http_code=$(curl --request POST \
              --silent \
              --output "$TRIGGER_UPLOAD_OUT" \
              --write-out "%{http_code}" \
              --url "$GLOTPRESS_IMPORT_URL/$TAG")

          response=$(cat "$TRIGGER_UPLOAD_OUT")
          rm "$TRIGGER_UPLOAD_OUT"

          if [[ ${http_code} -lt 200 || ${http_code} -gt 299 ]]; then
            echo "Could not trigger translations:"
            echo "$response"
            exit 1
          fi

          echo "Translations update triggered."
