---
name: "Create a pre-release"

# This action will run when it is triggered manually
on:
  workflow_dispatch:
    inputs:
      tagName:
        description: 'The tag name (e.g. 4.5.0-test-2 for prerelease during week 2)'
        required: true
        type: string
env:
  RELEASE_FILENAME: 'woocommerce-payments.zip'
  
defaults:
  run:
    shell: bash

jobs:
  create-release:
    name: Create the pre-release
    runs-on: ubuntu-20.04
    env:
      TAG_NAME: ${{ inputs.tagName }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
#        with:
#          ref: 'develop'
        
      - name: Create a testing branch and tag
        id: create_branch_tag
        uses: ./.github/actions/create-branch-tag
        with:
          tag-name: ${{ env.TAG_NAME }}

      - name: Setup Node and PHP with cache
        uses: ./.github/actions/setup-repo
        
      - name: Define variables
        id: define_var
        env: 
          TAG_NAME: ${{ steps.create_branch_tag.outputs.tag-name }}
        run: |
          echo "RELEASE_VERSION=$( sed -E 's/^([^-]+)-.*/\1/' <<< TAG_NAME )" >> $GITHUB_OUTPUT

      - name: Generate the changelog
        id: generate_changelog
        uses: ./.github/actions/generate-changelog
        with:
          release-version: ${{ steps.define_var.outputs.RELEASE_VERSION }}
          
      - name: Bump version header
        env:
          TAG_NAME: ${{ steps.create_branch_tag.outputs.tag-name }}
        run: |
          sed -i "s/^ \* Version: .*$/ * Version: $TAG_NAME/" woocommerce-payments.php
      
      - name: Build the plugin
        uses: ./.github/actions/build
          
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG: ${{ steps.generate_changelog.outputs.changelog }}
          TAG_MESSAGE: ${{ steps.create_branch_tag.outputs.tag-message }}
          TAG_NAME: ${{ steps.create_branch_tag.outputs.tag-name }}
        run: |
          RELEASE_NOTES=$(echo -e "${CHANGELOG}")
          gh release create $TAG_NAME --notes "$RELEASE_NOTES" --title "$TAG_MESSAGE" --target "develop" "--prerelease" $RELEASE_FILENAME
          
      - name: Trigger translations update on GlotPress
        env:
          GLOTPRESS_IMPORT_URL: ${{ secrets.GLOTPRESS_IMPORT_URL }}
          TAG_NAME: ${{ steps.create_branch_tag.outputs.tag-name }}
        run: |
          echo "Triggering translations update on GlotPress..."

          CURL_RESPONSE=$(curl --request POST \
              --url "$GLOTPRESS_IMPORT_URL/$TAG_NAME" \
              --silent \
              --write-out "\n%{http_code}\n" )
          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)

          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
            echo "$CURL_RESPONSE"
            echo "::error::Couldn't trigger translations."
            exit 1
          fi
          echo "Translations update triggered."
