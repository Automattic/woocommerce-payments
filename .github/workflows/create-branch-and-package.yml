---
name: Create branch and package
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g. 4.5.0)'
        required: true
      isPrerelease:
        description: 'True if this is a package for testing'
        required: false
        default: true
      weekNumber:
        description: 'Week number if this is a package for testing'
        required: false
        default: ""
env:
  RELEASE_FILENAME: 'woocommerce-payments.zip'

jobs:
  testing-branch:
    if: github.event.inputs.isPrerelease == true
    name: Create a testing branch
    runs-on: ubuntu-20.04
    env:
      BRANCH_NAME: testing/${{ github.event.inputs.versionName }}-test-${{ github.event.inputs.weekNumber }}
      TAG_NAME: ${{ github.event.inputs.versionName }}-test-${{ github.event.inputs.weekNumber }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create the branch
        run: git checkout -b ${{ env.BRANCH_NAME }}

      - name: Push the branch
        run: git push origin ${{ env.BRANCH_NAME }}

      - name: Create the tag
        run: git tag -a -m 'Version for testing ${{ env.TAG_NAME }}. Not for Production' ${{ env.TAG_NAME }}

      - name: Push the tag
        run: git push origin ${{ env.TAG_NAME }}

      - name: Retrieve tag information
        id: get_tag_info
        env:
          GITHUB_TAG_URL: ${{ format( '{0}/repos/{1}/git/refs/tags/{2}', github.api_url, github.repository, env.TAG_NAME) }}
        run: |
          CURL_RESPONSE=$(curl --request GET \
              --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
              --url "$GITHUB_TAG_URL" \
              --silent \
              --write-out "\n%{http_code}\n" )
          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)

          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
            echo "$CURL_RESPONSE"
            echo "::error::Couldn't retrieve tag information from GitHub."
            exit 1
          fi
          echo "::set-output name=RAW_TAG_DATA::$(echo $CURL_RESPONSE)"

      - name: Retrieve tag object
        id: get_tag_object
        env:
          TAG_OBJECT_URL: ${{ fromJson( steps.get_tag_info.outputs.RAW_TAG_DATA ).object.url }}
        run: |
          CURL_RESPONSE=$(curl --request GET \
              --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
              --url "$TAG_OBJECT_URL" \
              --silent \
              --write-out "\n%{http_code}\n" )
          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)

          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
            echo "$CURL_RESPONSE"
            echo "::error::Couldn't retrieve tag object from GitHub."
            exit 1
          fi
          echo "::set-output name=RAW_TAG_OBJECT::$(echo $CURL_RESPONSE)"

      - name: Enable composer dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.cache/composer/
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Setup NodeJS environment
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          
      - name: Setup PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
          coverage: none

      - name: Build release
        run: |
          # Change the 'Version' header in woocommerce-payments.php
          sed -i "s/^ \* Version: .*$/ * Version: ${TAG_NAME}/" woocommerce-payments.php
          npm ci
          npm run build

          if [[ ! -f $RELEASE_FILENAME ]]; then
            echo "::error::Failed to create release archive $RELEASE_FILENAME."
            exit 1
          fi

      - name: Extract changelog
        id: get_changelog
        run: |
          # pick anything before the first dash as a version number
          VERSION=$(sed -E 's/^([^-]+)-.*/\1/' <<< $TAG_NAME)

          # Install this dev package to gather changelog entries
          # Using `global` to avoid including it into the release package
          composer global require automattic/jetpack-changelogger:^3.0.7

          # Gather changelog entries
          ~/.composer/vendor/bin/changelogger write --use-version="$VERSION" --release-date=unreleased

          echo "Picking up changelog for version '$VERSION'..."
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]];
          then
            # Tag starts with SemVer, pick changelog for this version
            CHANGELOG=$(awk -v ver="$VERSION" '/^= / { if (p) { exit }; if ($2 == ver) { p=1; next } } p && NF' changelog.txt)
          else
            # Otherwise use the first changelog section
            CHANGELOG=$(awk '/^= / { if (p) { exit }; p=1; next } p && NF' changelog.txt)
          fi
          echo "$CHANGELOG"
          echo ::set-output name=CHANGELOG_JSON::$(echo "$CHANGELOG" | jq -aRs '.')

      - name: Create release
        id: create_release
        env:
          TAG_MESSAGE: ${{ fromJson( steps.get_tag_object.outputs.RAW_TAG_OBJECT ).message }}
          CHANGELOG: ${{ steps.get_changelog.outputs.CHANGELOG_JSON }}
          GITHUB_RELEASES_URL: ${{ format( 'https://api.github.com/repos/{0}/releases', github.repository ) }}
        run: |
          NAME=$( echo -ne "${TAG_MESSAGE:=$TAG}" | sed 's/\\n/\n/g' | head -n 1 | jq -aRs '.|rtrimstr("\n")' )
          echo "Will build a release for tag '$TAG' with the name '$NAME'..."

          echo "Creating pre-release..."
          CURL_RESPONSE=$(curl --request POST \
              --url "$GITHUB_RELEASES_URL" \
              --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
              --header 'Content-Type: application/json' \
              --data "{\"tag_name\":\"$TAG_NAME\",\"target_commitish\":\"develop\",\"name\":$NAME,\"body\":$CHANGELOG,\"prerelease\":true}" \
              --silent \
              --write-out "\n%{http_code}\n" )
          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)

          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
            echo "$CURL_RESPONSE"
            echo "::error::Couldn't create GitHub pre-release."
            exit 1
          fi

          echo "Release created."
          echo "::set-output name=RELEASE_JSON::$(echo $CURL_RESPONSE)"

      - name: Upload release assets
        id: upload_release_assets
        env:
          RELEASE_JSON: ${{ steps.create_release.outputs.RELEASE_JSON }}
          UPLOAD_URL: ${{ fromJson( steps.create_release.outputs.RELEASE_JSON ).upload_url }}
        run: |
          echo "Uploading release assets to GitHub release..."

          # remove trailing attributes from upload_url
          upload_url=$(echo $UPLOAD_URL | sed -E 's/([^{]*).*$/\1/')

          if [[ -z $upload_url ]]; then
            echo "::error::Asset upload URL is missing in response."
            echo "$RELEASE_JSON"
            exit 1
          fi

          CURL_RESPONSE=$(curl --request POST \
              --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
              --header 'Content-Type: application/zip' \
              --url "${upload_url}?name=$RELEASE_FILENAME" \
              --data-binary "@$RELEASE_FILENAME" \
              --silent \
              --write-out "\n%{http_code}\n" )
          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)

          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
            echo "$CURL_RESPONSE"
            echo "::error::Couldn't upload plugin archive $RELEASE_FILENAME to GitHub release."
            exit 1
          fi
          echo "Assets uploaded."

#      - name: Trigger translations update on GlotPress
#        id: trigger_translations
#        env:
#          GLOTPRESS_IMPORT_URL: ${{ secrets.GLOTPRESS_IMPORT_URL }}
#        run: |
#          echo "Triggering translations update on GlotPress..."
#
#          CURL_RESPONSE=$(curl --request POST \
#              --url "$GLOTPRESS_IMPORT_URL/$TAG_NAME" \
#              --silent \
#              --write-out "\n%{http_code}\n" )
#          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
#          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)
#
#          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
#            echo "$CURL_RESPONSE"
#            echo "::error::Couldn't trigger translations."
#            exit 1
#          fi
#          echo "Translations update triggered."
