---
name: Publish a pre-release
on:
  workflow_dispatch:
    inputs:
      tagName:
        description: 'The tag name (e.g. 4.5.0-test-2 for prerelease during week 2)'
        required: true
        type: string
env:
  RELEASE_FILENAME: 'woocommerce-payments.zip'
  
defaults:
  run:
    shell: bash

jobs:
  publish-pre-release:
    name: Publish the pre-release
    runs-on: ubuntu-20.04
    env:
      TAG_NAME: ${{ inputs.tagName }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
#        with:
#          ref: 'develop'

      - name: Create a branch and tag
        id: create_branch_tag
        run: |
          BRANCH_NAME="testing/${{ inputs.tagName }}"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          TAG_MESSAGE="Version for testing $TAG_NAME. Not for Production"
          git tag -a -m "$TAG_MESSAGE" $TAG_NAME
          git push origin ${{ env.TAG_NAME }}
          echo "::set-output name=TAG_MESSAGE::$TAG_MESSAGE"
          
          echo "::set-output name=RELEASE_VERSION::$( sed -E 's/^([^-]+)-.*/\1/' <<< $TAG_NAME )"

      - name: Setup Node and PHP with cache
        uses: ./.github/actions/setup-repo

      - name: Generate the changelog
        id: generate_changelog
        uses: ./.github/actions/generate-changelog
        with:
          release-version: $(( steps.create_branch_tag.outputs.RELEASE_VERSION }}
          
      - name: Bump version header
        run: |
          sed -i "s/^ \* Version: .*$/ * Version: $TAG_NAME/" woocommerce-payments.php
      
      - name: Build release
        run: |
          npm ci
          npm run build
    
          if [[ ! -f $RELEASE_FILENAME ]]; then
            echo "::error::Failed to create release archive $RELEASE_FILENAME."
            exit 1
          fi
          
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_MESSAGE: ${{ steps.create_branch_tag.outputs.TAG_MESSAGE }}
          CHANGELOG: ${{ steps.generate_changelog.outputs.changelog }}
        run: |
          RELEASE_NOTES=$(echo -e "${CHANGELOG}")
          gh release create $TAG_NAME --notes "$RELEASE_NOTES" --title "$TAG_MESSAGE" --target "develop" "--prerelease" $RELEASE_FILENAME
          
#      - name: Trigger translations update on GlotPress
#        env:
#          GLOTPRESS_IMPORT_URL: ${{ secrets.GLOTPRESS_IMPORT_URL }}
#        run: |
#          echo "Triggering translations update on GlotPress..."
#
#          CURL_RESPONSE=$(curl --request POST \
#              --url "$GLOTPRESS_IMPORT_URL/$TAG_NAME" \
#              --silent \
#              --write-out "\n%{http_code}\n" )
#          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
#          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)
#
#          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
#            echo "$CURL_RESPONSE"
#            echo "::error::Couldn't trigger translations."
#            exit 1
#          fi
#          echo "Translations update triggered."
