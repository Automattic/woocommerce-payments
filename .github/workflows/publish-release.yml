---
name: Publish a release (production or prerelease)
on:
  workflow_dispatch:
    inputs:
      tagName:
        description: 'The tag name (e.g. 4.5.0 for release or 4.5.0-test-2 for prerelease during week 2)'
        required: true
env:
  RELEASE_FILENAME: 'woocommerce-payments.zip'
  IS_PRERELEASE: ${{ contains( github.event.inputs.tagName, 'test') }}
  
defaults:
  run:
    shell: bash

jobs:
  publish-release:
    name: Publish the release
    runs-on: ubuntu-20.04
    env:
      TAG_NAME: ${{ inputs.tagName }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
#        with:
#          ref: 'develop'

      - name: Create a branch and tag
        id: create_branch_tag
        run: |
          if ${{ env.IS_PRERELEASE }}; then
            echo "::warning::Creating a test branch and tag."
            BRANCH_NAME="testing/${{ inputs.tagName }}"
            TAG_MESSAGE="Version for testing ${{  env.TAG_NAME }}. Not for Production"
          else
            echo "::warning::Creating a release branch and tag."
            BRANCH_NAME="release/${{ inputs.tagName }}"
            TAG_MESSAGE="Version ${{  env.TAG_NAME }}"
          fi
          
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          
          git tag -a -m "$TAG_MESSAGE" ${{ env.TAG_NAME }}
          echo "::set-output name=TAG_MESSAGE::$(echo $TAG_MESSAGE)"
          
          git push origin ${{ env.TAG_NAME }}

      - name: Setup Node and PHP with cache
        uses: ./.github/actions/setup-repo
        
      - name: Extract changelog
        id: get_changelog
        run: |
          # Pick anything before the first dash as a version number
          VERSION=$(sed -E 's/^([^-]+)-.*/\1/' <<< $TAG_NAME)

          # Install this dev package globally to gather changelog entries while not including it into the release package
          composer global require automattic/jetpack-changelogger:^3.0.7

          # Gather changelog entries
          ~/.composer/vendor/bin/changelogger write --use-version="$VERSION" --release-date=unreleased

          echo "Picking up changelog for version '$VERSION'..."
          CHANGELOG=$(awk '/^= / { if (p) { exit }; p=1; next } p && NF' changelog.txt)
          echo "$CHANGELOG"
          
          CHANGELOG_JSON_FORMATTED=$(echo "$CHANGELOG" | jq -aRs '.')
          CHANGELOG_JSON_FORMATTED="${CHANGELOG_JSON_FORMATTED//'\n'/'%0A'}"
          CHANGELOG_JSON_FORMATTED="${CHANGELOG_JSON_FORMATTED//\"/''}"
          echo ::set-output name=CHANGELOG_JSON::$(echo "$CHANGELOG_JSON_FORMATTED")
          
      - name: Build release
        run: |
          # Change the 'Version' header in woocommerce-payments.php
          sed -i "s/^ \* Version: .*$/ * Version: ${TAG_NAME}/" woocommerce-payments.php
          npm ci
          npm run build
    
          if [[ ! -f $RELEASE_FILENAME ]]; then
            echo "::error::Failed to create release archive $RELEASE_FILENAME."
            exit 1
          fi
          
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_MESSAGE: ${{ steps.create_branch_tag.outputs.TAG_MESSAGE }}
          CHANGELOG: ${{ steps.get_changelog.outputs.CHANGELOG_JSON }}
        run: |
          if ${{ env.IS_PRERELEASE }}; then
            echo "::warning::Creating a prerelease."
            PRERELEASE_FLAG="--prerelease"
          else
            echo "::warning::Creating a release."
            PRERELEASE_FLAG=""
          fi
          gh release create ${{ env.TAG_NAME }} --notes "${{ env.CHANGELOG }}" --title "${{ env.TAG_MESSAGE }}" --target "develop" $PRERELEASE_FLAG $RELEASE_FILENAME

#      - name: Trigger translations update on GlotPress
#        env:
#          GLOTPRESS_IMPORT_URL: ${{ secrets.GLOTPRESS_IMPORT_URL }}
#        run: |
#          echo "Triggering translations update on GlotPress..."
#
#          CURL_RESPONSE=$(curl --request POST \
#              --url "$GLOTPRESS_IMPORT_URL/$TAG_NAME" \
#              --silent \
#              --write-out "\n%{http_code}\n" )
#          HTTP_CODE=$(echo "$CURL_RESPONSE" | tail -n 1)
#          CURL_RESPONSE=$(echo "$CURL_RESPONSE" | head -n -1)
#
#          if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]]; then
#            echo "$CURL_RESPONSE"
#            echo "::error::Couldn't trigger translations."
#            exit 1
#          fi
#          echo "Translations update triggered."
